import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { 
  Breadcrumb, 
  Card, 
  Tag, 
  Image, 
  Button, 
  Tabs, 
  Typography, 
  Rate, 
  Divider, 
  List, 
  Avatar, 
  Collapse,
  Space
} from 'antd';
import { 
  ClockCircleOutlined, 
  EnvironmentOutlined, 
  PhoneOutlined, 
  UserOutlined,
  CommentOutlined,
  ExpandOutlined
} from '@ant-design/icons';
// import { GoogleMap, useJsApiLoader } from '@react-google-maps/api';
// import { AdvancedMarker } from '@googlemaps/adv-markers-react';

const { Title, Text, Paragraph } = Typography;

// Mock data - will be replaced with API calls later
const facilityData = {
  id: '1',
  name: 'S√¢n B√≥ng ƒê√° Mini Th·ªëng Nh·∫•t',
  status: 'active', // active, closed, maintenance
  images: [
    'https://images.unsplash.com/photo-1575361204480-aadea25e6e68',
    'https://images.unsplash.com/photo-1524015368236-bbf6f72545b6',
    'https://images.unsplash.com/photo-1579952363873-27f3bade9f55',
    'https://images.unsplash.com/photo-1552667466-07770ae110d0'
  ],
  operatingHours: {
    start: '06:00',
    end: '22:00'
  },
  address: '123 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP. H·ªì Ch√≠ Minh',
  owner: {
    name: 'Nguy·ªÖn VƒÉn A',
    phone: '0912345678'
  },
  sports: ['B√≥ng ƒë√°', 'B√≥ng r·ªï', 'C·∫ßu l√¥ng'],
  description: 'S√¢n B√≥ng ƒê√° Mini Th·ªëng Nh·∫•t l√† m·ªôt trong nh·ªØng c∆° s·ªü th·ªÉ thao hi·ªán ƒë·∫°i nh·∫•t t·∫°i Qu·∫≠n 7. V·ªõi h·ªá th·ªëng s√¢n c·ªè nh√¢n t·∫°o ch·∫•t l∆∞·ª£ng cao, h·ªá th·ªëng ƒë√®n chi·∫øu s√°ng hi·ªán ƒë·∫°i v√† c√°c ti·ªán √≠ch ƒëi k√®m, ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám ch∆°i th·ªÉ thao t·ªët nh·∫•t cho kh√°ch h√†ng.',
  fieldGroups: [
    {
      id: 'fg1',
      name: 'S√¢n b√≥ng ƒë√° 5 ng∆∞·ªùi',
      fields: [
        { id: 'f1', name: 'S√¢n s·ªë 1', surface: 'C·ªè nh√¢n t·∫°o', dimensions: '25m x 15m', price: 200000 },
        { id: 'f2', name: 'S√¢n s·ªë 2', surface: 'C·ªè nh√¢n t·∫°o', dimensions: '25m x 15m', price: 200000 }
      ]
    },
    {
      id: 'fg2',
      name: 'S√¢n b√≥ng ƒë√° 7 ng∆∞·ªùi',
      fields: [
        { id: 'f3', name: 'S√¢n s·ªë 3', surface: 'C·ªè nh√¢n t·∫°o', dimensions: '40m x 20m', price: 300000 },
        { id: 'f4', name: 'S√¢n s·ªë 4', surface: 'C·ªè nh√¢n t·∫°o', dimensions: '40m x 20m', price: 300000 }
      ]
    },
    {
      id: 'fg3',
      name: 'S√¢n c·∫ßu l√¥ng',
      fields: [
        { id: 'f5', name: 'S√¢n c·∫ßu l√¥ng 1', surface: 'G·ªó', dimensions: '13.4m x 6.1m', price: 100000 },
        { id: 'f6', name: 'S√¢n c·∫ßu l√¥ng 2', surface: 'G·ªó', dimensions: '13.4m x 6.1m', price: 100000 }
      ]
    }
  ],
  services: [
    { id: 's1', name: 'Cho thu√™ gi√†y', price: '30,000ƒë/ƒë√¥i' },
    { id: 's2', name: 'Cho thu√™ √°o', price: '20,000ƒë/b·ªô' },
    { id: 's3', name: 'N∆∞·ªõc u·ªëng', price: '15,000ƒë/chai' },
    { id: 's4', name: 'Ph√≤ng t·∫Øm', price: 'Mi·ªÖn ph√≠' }
  ],
  events: [
    { id: 'e1', name: 'Gi·∫£i ƒë·∫•u b√≥ng ƒë√° cu·ªëi tu·∫ßn', date: '20/05/2023', description: 'Gi·∫£i ƒë·∫•u b√≥ng ƒë√° 5 ng∆∞·ªùi d√†nh cho c√°c ƒë·ªôi trong khu v·ª±c.' },
    { id: 'e2', name: 'Khuy·∫øn m√£i gi·ªù v√†ng', date: '01/06/2023 - 30/06/2023', description: 'Gi·∫£m 20% gi√° thu√™ s√¢n t·ª´ 13:00 - 16:00 c√°c ng√†y trong tu·∫ßn.' }
  ],
  reviews: [
    { id: 'r1', user: 'Tr·∫ßn VƒÉn B', avatar: 'https://randomuser.me/api/portraits/men/1.jpg', rating: 5, comment: 'S√¢n r·∫•t ƒë·∫πp, d·ªãch v·ª• t·ªët, nh√¢n vi√™n th√¢n thi·ªán.', date: '15/04/2023' },
    { id: 'r2', user: 'L√™ Th·ªã C', avatar: 'https://randomuser.me/api/portraits/women/2.jpg', rating: 4, comment: 'S√¢n t·ªët, gi√° c·∫£ h·ª£p l√Ω. Ch·ªâ c√≥ ƒëi·ªÅu ƒë√¥i khi h∆°i ƒë√¥ng.', date: '20/03/2023' },
    { id: 'r3', user: 'Ph·∫°m VƒÉn D', avatar: 'https://randomuser.me/api/portraits/men/3.jpg', rating: 5, comment: 'Tuy·ªát v·ªùi! S·∫Ω quay l·∫°i nhi·ªÅu l·∫ßn n·ªØa.', date: '05/05/2023' }
  ],
  overallRating: 4.7,
  location: {
    lat: 10.762622,
    lng: 106.660172
  }
};

const DetailFacility: React.FC = () => {
  const navigate = useNavigate();
  const [mainImage, setMainImage] = useState(facilityData.images[0]);
  const [activeTab, setActiveTab] = useState('general');
//   const mapLibraries = ['marker'] 
  // Use the useJsApiLoader hook instead of LoadScript
//   const { isLoaded } = useJsApiLoader({
//     id: 'google-map-script',
//     googleMapsApiKey: import.meta.env.VITE_GOOGLE_MAPS_API_KEY || '',
//     libraries: mapLibraries
//   });

  const handleImageClick = (image: string) => {
    setMainImage(image);
  };

  const getStatusTag = (status: string) => {
    switch (status) {
      case 'active':
        return <Tag color="success" className="text-base px-3 py-1">ƒêang ho·∫°t ƒë·ªông</Tag>;
      case 'closed':
        return <Tag color="error" className="text-base px-3 py-1">ƒêang ƒë√≥ng c·ª≠a</Tag>;
      case 'maintenance':
        return <Tag color="warning" className="text-base px-3 py-1">ƒêang b·∫£o tr√¨</Tag>;
      default:
        return <Tag color="default" className="text-base px-3 py-1">Kh√¥ng x√°c ƒë·ªãnh</Tag>;
    }
  };

  const handleBookingClick = () => {
    navigate(`/booking/${facilityData.id}`);
  };

  // Define breadcrumb items
  const breadcrumbItems = [
    {
      title: <Link to="/">Trang ch·ªß</Link>,
    },
    {
      title: <Link to="/search">T√¨m ki·∫øm</Link>,
    },
    {
      title: 'Th√¥ng tin c∆° s·ªü',
    },
  ];

  // Define tab items
  const tabItems = [
    {
      key: 'general',
      label: 'Th√¥ng tin chung',
    },
    {
      key: 'fields',
      label: 'S√¢n ch∆°i',
    },
    {
      key: 'services',
      label: 'D·ªãch v·ª•',
    },
    {
      key: 'events',
      label: 'S·ª± ki·ªán',
    },
  ];

  // Define collapse items for field groups
  const getCollapseItems = () => {
    return facilityData.fieldGroups.map(group => ({
      key: group.id,
      label: (
        <div className="flex justify-between items-center">
          <span className="text-lg font-medium">{group.name}</span>
          <span className="text-gray-500">{group.fields.length} s√¢n</span>
        </div>
      ),
      children: (
        <List
          itemLayout="horizontal"
          dataSource={group.fields}
          renderItem={field => (
            <List.Item
              actions={[
                <Text key="price" className="text-blue-600 font-semibold">{field.price.toLocaleString()}ƒë/gi·ªù</Text>,
                <Button key="book" type="primary" size="small" onClick={handleBookingClick}>ƒê·∫∑t s√¢n</Button>
              ]}
            >
              <List.Item.Meta
                title={<Text strong>{field.name}</Text>}
                description={
                  <Space direction="vertical">
                    <Text>B·ªÅ m·∫∑t: {field.surface}</Text>
                    <Text>K√≠ch th∆∞·ªõc: {field.dimensions}</Text>
                  </Space>
                }
              />
            </List.Item>
          )}
        />
      ),
    }));
  };

  // Create a ref for the map
//   const mapRef = React.useRef<google.maps.Map | null>(null);
  
//   // Create a ref for the marker
//   const markerRef = React.useRef<google.maps.marker.AdvancedMarkerElement | null>(null);
  
//   // Handle map load
//   const onMapLoad = React.useCallback((map: google.maps.Map) => {
//     mapRef.current = map;
    
//     // Create the advanced marker when the map is loaded
//     if (window.google && window.google.maps) {
//       // Create a marker element
//       const markerElement = document.createElement('div');
//       markerElement.className = 'marker';
//       markerElement.style.color = 'red';
//       markerElement.innerHTML = 'üìç';
      
//       // Create the advanced marker
//       markerRef.current = new google.maps.marker.AdvancedMarkerElement({
//         map,
//         position: facilityData.location,
//         content: markerElement
//       });
//     }
//   }, []);

  return (
    <div className="container mx-auto px-4 py-6 max-w-7xl">
      {/* Section 1: Breadcrumb, Facility Name, Status, and Images */}
      <section className="mb-8">
        <Breadcrumb items={breadcrumbItems} className="mb-4" />

        <div className="flex justify-between items-center mb-6">
          <Title level={2} className="m-0">{facilityData.name}</Title>
          {getStatusTag(facilityData.status)}
        </div>

        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-12 md:col-span-8">
            <Image
              src={mainImage}
              alt={facilityData.name}
              className="w-full h-96 object-cover rounded-lg"
              preview={{
                mask: <div className="flex items-center justify-center"><ExpandOutlined /> Xem ·∫£nh l·ªõn</div>
              }}
            />
          </div>
          <div className="col-span-12 md:col-span-4 grid grid-cols-2 gap-4">
            {facilityData.images.slice(1, 5).map((image, index) => (
              <div key={index} className="relative cursor-pointer" onClick={() => handleImageClick(image)}>
                <Image
                  src={image}
                  alt={`${facilityData.name} ${index + 1}`}
                  className="w-full h-44 object-cover rounded-lg"
                  preview={false}
                />
                {index === 3 && facilityData.images.length > 5 && (
                  <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded-lg">
                    <Text className="text-white text-lg font-bold">+{facilityData.images.length - 5}</Text>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Section 2: Main Content with Tabs */}
      <section className="mb-8">
        <div className="flex justify-between items-center mb-6 flex-wrap gap-4">
          <Tabs 
            activeKey={activeTab} 
            onChange={setActiveTab}
            className="w-full md:w-auto"
            size="large"
            items={tabItems}
          />
          <Button 
            type="primary" 
            size="large" 
            onClick={handleBookingClick}
            className="bg-blue-600 hover:bg-blue-700"
          >
            ƒê·∫∑t s√¢n ngay
          </Button>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-md">
          {activeTab === 'general' && (
            <div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <div className="mb-6">
                    <Title level={4} className="mb-3">Gi·ªù ho·∫°t ƒë·ªông</Title>
                    <div className="flex items-center">
                      <ClockCircleOutlined className="mr-2 text-blue-600" />
                      <Text>{facilityData.operatingHours.start} - {facilityData.operatingHours.end}</Text>
                    </div>
                  </div>

                  <div className="mb-6">
                    <Title level={4} className="mb-3">ƒê·ªãa ch·ªâ</Title>
                    <div className="flex items-center">
                      <EnvironmentOutlined className="mr-2 text-blue-600" />
                      <Text>{facilityData.address}</Text>
                    </div>
                  </div>

                  <div className="mb-6">
                    <Title level={4} className="mb-3">Th√¥ng tin li√™n h·ªá</Title>
                    <div className="flex items-center mb-2">
                      <UserOutlined className="mr-2 text-blue-600" />
                      <Text>{facilityData.owner.name}</Text>
                    </div>
                    <div className="flex items-center">
                      <PhoneOutlined className="mr-2 text-blue-600" />
                      <Text>{facilityData.owner.phone}</Text>
                    </div>
                  </div>
                </div>

                <div>
                  <div className="mb-6">
                    <Title level={4} className="mb-3">M√¥n th·ªÉ thao</Title>
                    <div className="flex flex-wrap gap-2">
                      {facilityData.sports.map((sport, index) => (
                        <Tag key={index} color="blue" className="px-3 py-1 text-base">{sport}</Tag>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Title level={4} className="mb-3">M√¥ t·∫£</Title>
                    <Paragraph>{facilityData.description}</Paragraph>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'fields' && (
            <div>
              <Title level={4} className="mb-4">Danh s√°ch s√¢n</Title>
              <Collapse 
                defaultActiveKey={['fg1']} 
                className="mb-4"
                items={getCollapseItems()}
              />
            </div>
          )}

          {activeTab === 'services' && (
            <div>
              <Title level={4} className="mb-4">D·ªãch v·ª•</Title>
              <List
                itemLayout="horizontal"
                dataSource={facilityData.services}
                renderItem={service => (
                  <List.Item
                    actions={[
                      <Text key="price" className="text-blue-600 font-semibold">{service.price}</Text>
                    ]}
                  >
                    <List.Item.Meta
                      title={<Text strong>{service.name}</Text>}
                    />
                  </List.Item>
                )}
              />
            </div>
          )}

          {activeTab === 'events' && (
            <div>
              <Title level={4} className="mb-4">S·ª± ki·ªán</Title>
              <List
                itemLayout="vertical"
                dataSource={facilityData.events}
                renderItem={event => (
                  <List.Item>
                    <List.Item.Meta
                      title={<Text strong>{event.name}</Text>}
                      description={<Text type="secondary">Th·ªùi gian: {event.date}</Text>}
                    />
                    <Paragraph>{event.description}</Paragraph>
                  </List.Item>
                )}
              />
            </div>
          )}
        </div>
      </section>

      {/* Section 3: Reviews */}
      <section className="mb-8">
        <Card className="shadow-md">
          <Title level={3} className="mb-6">ƒê√°nh gi√°</Title>
          
          <div className="flex items-center mb-6">
            <div className="mr-8 text-center">
              <Title level={1} className="m-0 text-blue-600">{facilityData.overallRating}</Title>
              <Rate disabled defaultValue={facilityData.overallRating} allowHalf />
              <Text className="block mt-2">{facilityData.reviews.length} ƒë√°nh gi√°</Text>
            </div>
            <Divider type="vertical" className="h-20" />
            <div>
              <Title level={4} className="mb-2">ƒê√°nh gi√° c·ªßa ng∆∞·ªùi ch∆°i</Title>
              <Text>D·ª±a tr√™n tr·∫£i nghi·ªám th·ª±c t·∫ø c·ªßa ng∆∞·ªùi ch∆°i ƒë√£ ƒë·∫∑t s√¢n t·∫°i c∆° s·ªü n√†y</Text>
            </div>
          </div>

          <Divider />

          <List
            itemLayout="vertical"
            dataSource={facilityData.reviews}
            renderItem={review => (
              <List.Item>
                <List.Item.Meta
                  avatar={<Avatar src={review.avatar} size={48} />}
                  title={
                    <div className="flex items-center">
                      <Text strong className="mr-2">{review.user}</Text>
                      <Rate disabled defaultValue={review.rating} className="text-sm" />
                    </div>
                  }
                  description={<Text type="secondary">{review.date}</Text>}
                />
                <Paragraph>{review.comment}</Paragraph>
              </List.Item>
            )}
          />

          <div className="mt-4 text-center">
            <Button 
              type="default" 
              icon={<CommentOutlined />}
              onClick={() => setActiveTab('reviews')}
            >
              Vi·∫øt ƒë√°nh gi√°
            </Button>
          </div>
        </Card>
      </section>

      {/* Section 4: Map */}
      <section>
      <div className="h-96 w-full">
  <img 
    src={`https://maps.googleapis.com/maps/api/staticmap?center=${facilityData.location.lat},${facilityData.location.lng}&zoom=15&size=600x400&markers=color:red%7C${facilityData.location.lat},${facilityData.location.lng}&key=${import.meta.env.VITE_GOOGLE_MAPS_API_KEY}`}
    alt="B·∫£n ƒë·ªì v·ªã tr√≠ c∆° s·ªü"
    className="w-full h-full object-cover"
  />
</div>
      </section>
    </div>
  );
};

export default DetailFacility;
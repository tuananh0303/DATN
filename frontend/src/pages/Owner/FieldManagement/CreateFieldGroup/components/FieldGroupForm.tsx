import React, { useState, useEffect } from 'react';
import { Modal, Form, Input, InputNumber, Select, TimePicker, Typography, Row, Col, Divider, Card, Tag, Checkbox, Alert, Button } from 'antd';
import { FieldGroupFormData } from '@/types/field.type';
import { SURFACE_TYPES, DIMENSIONS, DEFAULT_PRICING, COMPATIBLE_SPORT_GROUPS } from '@/mocks/default/defaultData';
import { Sport } from '@/types/sport.type';
import { ExclamationCircleOutlined, InfoCircleOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';
import { getSportNameInVietnamese } from '@/utils/translateSport';
import dayjs from 'dayjs';

const { Title, Text } = Typography;
const { Option } = Select;

interface FieldGroupFormProps {
  open: boolean;
  onClose: () => void;
  onSave: (fieldGroup: FieldGroupFormData) => void;
  sport: Sport;
  allSports: Sport[];
  selectedSportIds?: number[]; // Optional parameter for pre-selected sports
  editingFieldGroup?: EditingData; // Add this prop to receive editing data directly
}

// Tạo interface cho đối tượng EditingData để tránh sử dụng any
interface EditingData {
  name?: string;
  dimension?: string;
  surface?: string;
  basePrice?: number;
  numberOfPeaks?: number;
  fields?: Array<{ name: string; id?: string; status?: string } | string>;
  peakStartTime1?: string;
  peakEndTime1?: string;
  priceIncrease1?: number;
  peakStartTime2?: string;
  peakEndTime2?: string;
  priceIncrease2?: number;
  peakStartTime3?: string;
  peakEndTime3?: string;
  priceIncrease3?: number;
  sportIds?: number[];
}

interface ParentComponentWithEdit {
  editingFieldGroup?: EditingData;
  peakTime1?: [dayjs.Dayjs, dayjs.Dayjs];
  peakTime2?: [dayjs.Dayjs, dayjs.Dayjs];
  peakTime3?: [dayjs.Dayjs, dayjs.Dayjs];
}

const FieldGroupForm: React.FC<FieldGroupFormProps> = ({
  open,
  onClose,
  onSave,
  sport,
  allSports,
  selectedSportIds = [], // Default to empty array if not provided
  editingFieldGroup
}) => {
  const [form] = Form.useForm();
  const [selectedSports, setSelectedSports] = useState<number[]>([sport.id]);
  const [isMultiSport, setIsMultiSport] = useState<boolean>(false);
  const [fieldCount, setFieldCount] = useState<number>(1);
  const [namingMethod, setNamingMethod] = useState<'auto' | 'custom'>('auto');
  const [fieldPrefix, setFieldPrefix] = useState<string>(`Sân ${getSportNameInVietnamese(sport.name)}`);
  const [customNames, setCustomNames] = useState<string[]>([]);
  const [visiblePeaks, setVisiblePeaks] = useState<number>(0);
  
  // Reset form when modal opens
  useEffect(() => {
    if (open) {
      // Reset states first
      // Handle which sport to initialize with
      const initialSportIds = selectedSportIds.length > 0 
        ? selectedSportIds 
        : (sport.id === 999 
          ? allSports.filter(s => s.id !== 999).slice(0, 2).map(s => s.id)
          : [sport.id]);
          
      setSelectedSports(initialSportIds);
      // Automatically set multi-sport flag based on sport type or multiple selection
      const isMultiSportField = sport.id === 999 || initialSportIds.length > 1;
      setIsMultiSport(isMultiSportField);
      setFieldCount(1);
      setNamingMethod('auto');
      
      // Ban đầu không hiển thị giờ cao điểm nào
      setVisiblePeaks(0);
      
      // Set appropriate field prefix based on selected sport
      const prefixText = sport.id === 999 
        ? 'Đa năng' 
        : getSportNameInVietnamese(sport.name);
      setFieldPrefix(`Sân ${prefixText}`);
      setCustomNames([]);
      
      // Reset form with default values
      setTimeout(() => {
        // Get sport key for accessing mock data
        const sportKey = (sport.id === 999 ? 'football' : sport.name.toLowerCase()) as keyof typeof SURFACE_TYPES;
        
        // Get defaults from mock data
        const surfaceOptions = SURFACE_TYPES[sportKey] || SURFACE_TYPES.default;
        const dimensionOptions = DIMENSIONS[sportKey] || DIMENSIONS.default;
        const defaultPrice = DEFAULT_PRICING[sportKey as keyof typeof DEFAULT_PRICING] || DEFAULT_PRICING.default;
        
        // Kiểm tra xem có tồn tại các options và giá trị mặc định không
        const finalSurface = surfaceOptions.length > 0 ? surfaceOptions[0] : '';
        const finalDimension = dimensionOptions.length > 0 ? dimensionOptions[0] : '';
        
        // Reset form with initial values
        form.resetFields();
        
        // Create appropriate form name based on sport type and field count
        const sportName = sport.id === 999 
          ? 'Đa năng' 
          : getSportNameInVietnamese(sport.name);
        
        const autoGeneratedName = `Nhóm 1 sân ${sportName}`;
        
        // Check if we're editing an existing field group
        const isEditing = selectedSportIds && selectedSportIds.length > 0;
        let editingData: EditingData = {};
        let numberOfPeaks = 0; // Mặc định là 0 thay vì 1
        
        // Adjust fields based on existing data
        if (isEditing) {
          // Use the editingFieldGroup prop if available
          if (editingFieldGroup) {
            editingData = editingFieldGroup;
          } 
          // Otherwise, try to extract from onSave as a fallback
          else if (onSave) {
            const parentComponent = onSave as unknown as ParentComponentWithEdit;
            // Check if we have peak times from parent component
            if (parentComponent.peakTime1 || parentComponent.peakTime2 || parentComponent.peakTime3) {
              editingData = parentComponent as unknown as EditingData;
            } else if (parentComponent.editingFieldGroup) {
              editingData = parentComponent.editingFieldGroup;
            }
          }
          
          // Extract values from editingData
          const fieldCount = editingData.fields ? editingData.fields.length : 1;
          setFieldCount(fieldCount);

          // Set custom names if they exist
          if (editingData.fields && editingData.fields.length > 0) {
            const names = editingData.fields.map((f) => 
              typeof f === 'object' ? f.name : f
            );
            setCustomNames(names);
          }
          
          // Check how many peak times are present
          if (editingData.peakStartTime3 && editingData.peakEndTime3) {
            numberOfPeaks = 3;
            setVisiblePeaks(3);
          } else if (editingData.peakStartTime2 && editingData.peakEndTime2) {
            numberOfPeaks = 2;
            setVisiblePeaks(2);
          } else if (editingData.peakStartTime1 && editingData.peakEndTime1) {
            numberOfPeaks = 1;
            setVisiblePeaks(1);
          }
          
          // If this is an edit with custom name, set the flag
          if (editingData.name && !editingData.name.includes(`Nhóm ${fieldCount}`)) {
            form.setFieldsValue({ useCustomName: true });
          }
        }
        
        // Parse times from parent component if they exist
        const parseTime = (timeStr: string | undefined) => {
          if (!timeStr) return null;
          return dayjs(timeStr, 'HH:mm');
        };
        
        // Prepare peak time values
        let peakTime1 = undefined;
        let peakTime2 = undefined;
        let peakTime3 = undefined;
        
        if (isEditing) {
          // For peak time 1
          if (editingData.peakStartTime1 && editingData.peakEndTime1) {
            peakTime1 = [parseTime(editingData.peakStartTime1), parseTime(editingData.peakEndTime1)];
          }
          
          // For peak time 2
          if (editingData.peakStartTime2 && editingData.peakEndTime2) {
            peakTime2 = [parseTime(editingData.peakStartTime2), parseTime(editingData.peakEndTime2)];
          }
          
          // For peak time 3
          if (editingData.peakStartTime3 && editingData.peakEndTime3) {
            peakTime3 = [parseTime(editingData.peakStartTime3), parseTime(editingData.peakEndTime3)];
          }
        }
        
        // Set all form values
        form.setFieldsValue({
          name: isEditing ? editingData.name : autoGeneratedName,
          dimension: isEditing ? editingData.dimension : finalDimension,
          surface: isEditing ? editingData.surface : finalSurface,
          basePrice: isEditing ? editingData.basePrice : defaultPrice,
          numberOfPeaks: numberOfPeaks,
          sportIds: initialSportIds,
          fieldCount: isEditing ? (editingData.fields ? editingData.fields.length : 1) : 1,
          useCustomName: isEditing ? (editingData.name && !editingData.name.includes(`Nhóm ${fieldCount}`)) : false,
          
          // Set peak times and price increases
          peakTime1: peakTime1,
          peakStartTime1: peakTime1 ? peakTime1[0] : null,
          peakEndTime1: peakTime1 ? peakTime1[1] : null,
          priceIncrease1: isEditing ? editingData.priceIncrease1 : 0,
          
          peakTime2: peakTime2,
          peakStartTime2: peakTime2 ? peakTime2[0] : null,
          peakEndTime2: peakTime2 ? peakTime2[1] : null,
          priceIncrease2: isEditing ? editingData.priceIncrease2 : 0,
          
          peakTime3: peakTime3,
          peakStartTime3: peakTime3 ? peakTime3[0] : null,
          peakEndTime3: peakTime3 ? peakTime3[1] : null,
          priceIncrease3: isEditing ? editingData.priceIncrease3 : 0,
        });
        
        // Logging for debug purposes
        console.log("Form initialized with values:", {
          editing: isEditing,
          fieldCount: isEditing ? (editingData.fields ? editingData.fields.length : 1) : 1,
          peakCount: numberOfPeaks,
          peakTime1: peakTime1,
          peakTime2: peakTime2,
          peakTime3: peakTime3
        });
      }, 0);
    }
  }, [open, form, sport, allSports, selectedSportIds, onSave, editingFieldGroup]);
  
  // Generate field names based on naming method and count
  const generateFieldNames = () => {
    if (namingMethod === 'auto') {
      return Array.from({ length: fieldCount }, (_, i) => `${fieldPrefix} ${i + 1}`);
    } else {
      return customNames.slice(0, fieldCount);
    }
  };
  
  // Handle field count change
  const handleFieldCountChange = (value: number | null) => {
    if (!value) return;
    
    setFieldCount(value);
    
    // Update field group name if auto naming is enabled
    const useCustomName = form.getFieldValue('useCustomName');
    if (!useCustomName) {
      const sportName = sport.id === 999 
        ? 'Đa năng' 
        : getSportNameInVietnamese(sport.name);
      form.setFieldsValue({
        name: `Nhóm ${value} sân ${sportName}`
      });
    }
    
    // Update custom names if needed
    if (namingMethod === 'custom') {
      const newNames = [...customNames];
      while (newNames.length < value) {
        newNames.push(`Sân ${newNames.length + 1}`);
      }
      setCustomNames(newNames);
    }
  };
  
  // Handle custom name change
  const handleCustomNameChange = (index: number, value: string) => {
    const newNames = [...customNames];
    newNames[index] = value;
    setCustomNames(newNames);
  };
  
  // Handle naming method change
  const handleNamingMethodChange = (method: 'auto' | 'custom') => {
    setNamingMethod(method);
    
    if (method === 'custom') {
      // Initialize custom names if switching to custom
      const initialNames = Array.from({ length: fieldCount }, (_, i) => 
        `${getSportNameInVietnamese(sport.name)} ${i + 1}`
      );
      setCustomNames(initialNames);
    }
  };
  
  // Handle sport selection
  const handleSportSelect = (values: number[]) => {
    setSelectedSports(values);
    form.setFieldsValue({ sportIds: values });
    
    // If values length is greater than 1, try to find a suitable composite group
    if (values.length > 1) {
      // Find sport objects for the selected ids
      const selectedSportObjects = values.map(id => 
        allSports.find(s => s.id === id)
      ).filter(Boolean) as Sport[];
      
      // Get sport names for lookup
      const selectedSportNames = selectedSportObjects.map(s => s.name.toLowerCase());
      
      // Try to find a compatible group that matches our selection
      const matchingGroup = COMPATIBLE_SPORT_GROUPS.find(group => {
        // Check if all selected sports are in this group
        return selectedSportNames.every(sport => group.sports.includes(sport));
      });
      
      if (matchingGroup) {
        // Found a matching group, use its recommendations
        if (matchingGroup.recommendedSurfaces && matchingGroup.recommendedSurfaces.length > 0) {
          form.setFieldsValue({ surface: matchingGroup.recommendedSurfaces[0] });
        }
        
        if (matchingGroup.recommendedDimensions && matchingGroup.recommendedDimensions.length > 0) {
          form.setFieldsValue({ dimension: matchingGroup.recommendedDimensions[0] });
        }
        
        // Update field prefix and group name
        setFieldPrefix(`Sân ${matchingGroup.name}`);
        
        // Only update name if not using custom name
        const useCustomName = form.getFieldValue('useCustomName');
        if (!useCustomName) {
          const fieldCount = form.getFieldValue('fieldCount') || 1;
          form.setFieldsValue({
            name: `Nhóm ${fieldCount} ${matchingGroup.name}`
          });
        }
      } else {
        // No exact match, just use a generic name
        const sportName = 'Đa năng';
        setFieldPrefix(`Sân ${sportName}`);
        
        // Only update name if not using custom name
        const useCustomName = form.getFieldValue('useCustomName');
        if (!useCustomName) {
          const fieldCount = form.getFieldValue('fieldCount') || 1;
          form.setFieldsValue({
            name: `Nhóm ${fieldCount} sân ${sportName}`
          });
        }
      }
    } else if (values.length === 1) {
      // Only one sport selected
      const selectedSport = allSports.find(s => s.id === values[0]);
      if (selectedSport) {
        const sportName = getSportNameInVietnamese(selectedSport.name);
        setFieldPrefix(`Sân ${sportName}`);
        
        // Only update name if not using custom name
        const useCustomName = form.getFieldValue('useCustomName');
        if (!useCustomName) {
          const fieldCount = form.getFieldValue('fieldCount') || 1;
          form.setFieldsValue({
            name: `Nhóm ${fieldCount} sân ${sportName}`
          });
        }
      }
    }
  };
  
  // Get surface options based on selected sports
  const getSurfaceOptions = () => {
    if (selectedSports.length === 0) return SURFACE_TYPES.default;
    
    // Find the first selected sport
    const selectedSport = allSports.find(s => s.id === selectedSports[0]);
    if (!selectedSport) return SURFACE_TYPES.default;
    
    // Get the sport key for accessing mock data
    const sportKey = selectedSport.name.toLowerCase() as keyof typeof SURFACE_TYPES;
    
    return SURFACE_TYPES[sportKey] || SURFACE_TYPES.default;
  };
  
  // Get dimension options based on selected sports
  const getDimensionOptions = () => {
    if (selectedSports.length === 0) return DIMENSIONS.default;
    
    // Find the first selected sport
    const selectedSport = allSports.find(s => s.id === selectedSports[0]);
    if (!selectedSport) return DIMENSIONS.default;
    
    // Get the sport key for accessing mock data
    const sportKey = selectedSport.name.toLowerCase() as keyof typeof DIMENSIONS;
    
    return DIMENSIONS[sportKey] || DIMENSIONS.default;
  };
  
  // Update the form values if the selected sport changes and options change
  useEffect(() => {
    // This effect should not be needed anymore as we use Form.Item with shouldUpdate
    // to handle the surface and dimension options
  }, [selectedSports, form]);
  
  // Handle peak time range change
  const handlePeakTimeRangeChange = (index: number, times: [dayjs.Dayjs | null, dayjs.Dayjs | null] | null) => {
    if (!times) return;
    
    const [start, end] = times;
    if (!start || !end) return;

    // Update hidden form fields based on peak index
    if (index === 1) {
      form.setFieldsValue({
        peakStartTime1: start,
        peakEndTime1: end
      });
    } else if (index === 2) {
      form.setFieldsValue({
        peakStartTime2: start,
        peakEndTime2: end
      });
    } else if (index === 3) {
      form.setFieldsValue({
        peakStartTime3: start,
        peakEndTime3: end
      });
    }
  };
  
  // Get time range for peak hours
  const getPeakTimeRange = (peakIndex: number): [dayjs.Dayjs | null, dayjs.Dayjs | null] | undefined => {
    const values = form.getFieldsValue();
    
    if (peakIndex === 1 && values.peakStartTime1 && values.peakEndTime1) {
      return [values.peakStartTime1, values.peakEndTime1];
    } else if (peakIndex === 2 && values.peakStartTime2 && values.peakEndTime2) {
      return [values.peakStartTime2, values.peakEndTime2];  
    } else if (peakIndex === 3 && values.peakStartTime3 && values.peakEndTime3) {
      return [values.peakStartTime3, values.peakEndTime3];
    }
    
    return undefined;
  };

  // Add peak time slot
  const addPeakTime = () => {
    if (visiblePeaks < 3) {
      setVisiblePeaks(visiblePeaks + 1);
      form.setFieldsValue({
        numberOfPeaks: visiblePeaks + 1
      });
    }
  };
  
  // Remove peak time slot
  const removePeakTime = (peakNumber: number) => {
    if (peakNumber === 2) {
      // Remove peak 2 and 3
      form.setFieldsValue({
        peakStartTime2: null,
        peakEndTime2: null,
        peakStartTime3: null,
        peakEndTime3: null,
        peakTime2: null,
        peakTime3: null,
        priceIncrease2: 0,
        priceIncrease3: 0,
        numberOfPeaks: 1
      });
      setVisiblePeaks(1);
    } else if (peakNumber === 3) {
      // Remove peak 3
      form.setFieldsValue({
        peakStartTime3: null,
        peakEndTime3: null,
        peakTime3: null,
        priceIncrease3: 0,
        numberOfPeaks: 2
      });
      setVisiblePeaks(2);
    }
  };

  // Handle form submission
  const handleSubmit = () => {
    form.validateFields().then(values => {
      // Generate field data based on naming method
      const fieldNames = generateFieldNames();
      const fieldsData = fieldNames.map((name, index) => ({ 
        id: `tmp-${index}`,
        name,
        status: 'active' as const
      }));
      
      // Định dạng thời gian theo chuẩn HH:MM
      const formatTimeToHHMM = (time: dayjs.Dayjs | null): string => {
        if (!time) return '';
        return time.format('HH:mm'); // Không thêm giây (:ss)
      };
      
      // Build field group data
      const baseFieldGroupData = {
        name: values.name,
        dimension: values.dimension,
        surface: values.surface,
        basePrice: values.basePrice,
        sportIds: values.sportIds && values.sportIds.length > 0 
          ? values.sportIds.filter((id: number) => id !== 999) 
          : [sport.id].filter(id => id !== 999),
        fields: fieldsData,
        // // Provide default/empty values for required properties to satisfy the type
        // peakStartTime1: "",
        // peakEndTime1: "",
        // priceIncrease1: 0,
      };
      
      // Create the field group data with peak time handling - only add if exists
      const fieldGroupData: FieldGroupFormData = {
        ...baseFieldGroupData
      };
      
      // Chỉ thêm thông tin giờ cao điểm nếu có hiển thị khung giờ cao điểm
      if (visiblePeaks >= 1 && values.peakTime1 && values.peakTime1[0] && values.peakTime1[1]) {
        fieldGroupData.peakStartTime1 = formatTimeToHHMM(values.peakTime1[0]);
        fieldGroupData.peakEndTime1 = formatTimeToHHMM(values.peakTime1[1]);
        fieldGroupData.priceIncrease1 = values.priceIncrease1 || 0;
      }
      
      if (visiblePeaks >= 2 && values.peakTime2 && values.peakTime2[0] && values.peakTime2[1]) {
        fieldGroupData.peakStartTime2 = formatTimeToHHMM(values.peakTime2[0]);
        fieldGroupData.peakEndTime2 = formatTimeToHHMM(values.peakTime2[1]);
        fieldGroupData.priceIncrease2 = values.priceIncrease2 || 0;
      }
      
      if (visiblePeaks >= 3 && values.peakTime3 && values.peakTime3[0] && values.peakTime3[1]) {
        fieldGroupData.peakStartTime3 = formatTimeToHHMM(values.peakTime3[0]);
        fieldGroupData.peakEndTime3 = formatTimeToHHMM(values.peakTime3[1]);
        fieldGroupData.priceIncrease3 = values.priceIncrease3 || 0;
      }
      
      // Show confirmation modal
      Modal.confirm({
        title: 'Xác nhận tạo nhóm sân mới',
        icon: <ExclamationCircleOutlined />,
        content: (
          <div>
            <p>Bạn có chắc chắn muốn tạo nhóm sân mới với thông tin đã nhập?</p>
            <p style={{ marginTop: '10px' }}>
              <b>Lưu ý:</b> Việc tạo nhóm sân mới đồng nghĩa với việc bạn xác nhận các sân này có thực và thuộc quyền quản lý của cơ sở. Bạn chịu hoàn toàn trách nhiệm về tính xác thực của thông tin này.
            </p>
          </div>
        ),
        onOk() {
          onSave(fieldGroupData);
        },
        okText: 'Xác nhận',
        cancelText: 'Hủy',
      });
    });
  };
  
  return (
    <Modal
      title={<Title level={4}>Tạo nhóm sân mới</Title>}
      open={open}
      onCancel={onClose}
      onOk={handleSubmit}
      okText="Tạo nhóm sân"
      cancelText="Hủy"
      width={800}
      style={{ top: 20 }}
      styles={{ 
        body: { maxHeight: 'calc(100vh - 200px)', overflowY: 'auto' }
      }}
    >
      <Form.Provider>
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            numberOfPeaks: 0,
            fieldCount: 1,
          }}
        >
          {/* Basic Information */}
          <Title level={5}>Thông tin cơ bản</Title>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item noStyle shouldUpdate>
                {({ getFieldValue }) => {
                  const useCustomName = getFieldValue('useCustomName');
                  
                  return (
                    <>
                      <Form.Item
                        label="Tên nhóm sân"
                        name="name"
                        rules={[{ required: true, message: 'Vui lòng nhập tên nhóm sân' }]}
                      >
                        <Input 
                          placeholder="Nhập tên nhóm sân" 
                          disabled={!useCustomName}
                        />
                      </Form.Item>
                      
                      <Form.Item
                        name="useCustomName"
                        valuePropName="checked"
                        initialValue={false}
                      >
                        <Checkbox 
                          onChange={(e) => {
                            // If turning off custom naming, regenerate the name
                            if (!e.target.checked) {
                              const fieldCount = form.getFieldValue('fieldCount') || 1;
                              const sportName = sport.id === 999 
                                ? 'Đa năng' 
                                : getSportNameInVietnamese(sport.name);
                              form.setFieldsValue({
                                name: `Nhóm ${fieldCount} sân ${sportName}`
                              });
                            }
                          }}
                        >
                          Tùy chỉnh tên nhóm sân
                        </Checkbox>
                      </Form.Item>
                    </>
                  );
                }}
              </Form.Item>
            </Col>
            
            <Col span={12}>
              <Form.Item
                label="Giá sân cơ bản"
                name="basePrice"
                rules={[{ required: true, message: 'Vui lòng nhập giá sân' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  addonAfter="VNĐ/giờ"
                  placeholder="Nhập giá sân cơ bản"
                  min={0}
                  max={999999999}
                  step={10000}
                  formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, '.')}
                  parser={(value: string | undefined) => {
                  if (!value) return 0;
                  return Number(value.replace(/\./g, ''));
                }}
                />
              </Form.Item>
            </Col>
          </Row>
          
          {/* Sport Type */}
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item label="Loại hình thể thao">
                {isMultiSport ? (
                  <>
                    <div className="mb-2">
                      <Text>Sân đa năng (nhiều môn thể thao)</Text>
                    </div>
                    
                    {/* Recommended combinations */}
                    {sport.id === 999 && (
                      <div className="mb-4">
                        <Alert
                          type="info"
                          message={
                            <div>
                              <div className="font-medium mb-2">
                                <InfoCircleOutlined className="mr-2" />
                                Gợi ý các loại sân tổng hợp phổ biến
                              </div>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mb-3">
                                {COMPATIBLE_SPORT_GROUPS.map(group => (
                                  <Card 
                                    key={group.id} 
                                    size="small" 
                                    className="cursor-pointer hover:shadow-md"
                                    onClick={() => {
                                      // Find sport IDs matching the sport names
                                      const sportIds = group.sports
                                        .map(sportName => {
                                          const matchingSport = allSports.find(
                                            s => s.name.toLowerCase() === sportName.toLowerCase()
                                          );
                                          return matchingSport?.id;
                                        })
                                        .filter(Boolean) as number[];
                                      
                                      if (sportIds.length > 0) {
                                        // Set the selected sports
                                        setSelectedSports(sportIds);
                                        form.setFieldsValue({ sportIds: sportIds });
                                        
                                        // Set recommended surface and dimension if available
                                        if (group.recommendedSurfaces && group.recommendedSurfaces.length > 0) {
                                          form.setFieldsValue({ surface: group.recommendedSurfaces[0] });
                                        }
                                        
                                        if (group.recommendedDimensions && group.recommendedDimensions.length > 0) {
                                          form.setFieldsValue({ dimension: group.recommendedDimensions[0] });
                                        }
                                        
                                        // Update the field prefix based on group name
                                        setFieldPrefix(`Sân ${group.name}`);
                                        
                                        // Update the form name to include the group name
                                        const fieldCount = form.getFieldValue('fieldCount') || 1;
                                        form.setFieldsValue({
                                          name: `Nhóm ${fieldCount} ${group.name}`
                                        });
                                      }
                                    }}
                                  >
                                    <div className="font-medium text-sm">{group.name}</div>
                                    <div className="text-xs text-gray-500">{group.description}</div>
                                    <div className="flex flex-wrap gap-1 mt-1">
                                      {group.sports.map((sportName, idx) => {
                                        const matchingSport = allSports.find(
                                          s => s.name.toLowerCase() === sportName.toLowerCase()
                                        );
                                        return matchingSport ? (
                                          <Tag key={idx} color="blue">
                                            {getSportNameInVietnamese(matchingSport.name)}
                                          </Tag>
                                        ) : null;
                                      })}
                                    </div>
                                    {group.recommendedSurfaces && group.recommendedSurfaces.length > 0 && (
                                      <div className="text-xs mt-2">
                                        <span className="text-gray-500">Mặt sân: </span>
                                        {group.recommendedSurfaces[0]}
                                      </div>
                                    )}
                                    {group.recommendedDimensions && group.recommendedDimensions.length > 0 && (
                                      <div className="text-xs">
                                        <span className="text-gray-500">Kích thước: </span>
                                        {group.recommendedDimensions[0]}
                                      </div>
                                    )}
                                  </Card>
                                ))}
                              </div>
                              <Text type="secondary" className="text-xs">Nhấp vào một gợi ý để chọn nhanh cấu hình sân tổng hợp</Text>
                            </div>
                          }
                        />
                      </div>
                    )}
                    
                    <Form.Item 
                      name="sportIds"
                      rules={[{ required: true, message: 'Vui lòng chọn ít nhất một loại hình thể thao' }]}
                      noStyle
                    >
                      <Select
                        mode="multiple"
                        placeholder="Chọn loại hình thể thao"
                        onChange={handleSportSelect}
                        style={{ width: '100%' }}
                        disabled={sport.id === 999} // Disable editing if this is a Composite field
                      >
                        {allSports
                          .filter(s => s.id !== 999) // Remove Composite from options
                          .map(sport => (
                            <Option key={sport.id} value={sport.id}>
                              {getSportNameInVietnamese(sport.name)}
                            </Option>
                          ))
                        }
                      </Select>
                    </Form.Item>
                    
                    {sport.id === 999 && (
                      <div className="mt-2">
                        <Text type="secondary">
                          Các loại hình thể thao đã chọn cho sân đa năng:
                        </Text>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {selectedSports.map(sportId => {
                            const sportObj = allSports.find(s => s.id === sportId);
                            return sportObj ? (
                              <Tag key={sportId} color="blue">
                                {getSportNameInVietnamese(sportObj.name)}
                              </Tag>
                            ) : null;
                          })}
                        </div>
                      </div>
                    )}
                  </>
                ) : (
                  <div>
                    <Text strong>{getSportNameInVietnamese(sport.name)}</Text>
                  </div>
                )}
              </Form.Item>
            </Col>
          </Row>
          
          {/* Surface and Dimensions */}
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item noStyle shouldUpdate={(prevValues, currentValues) => 
                prevValues.sportIds !== currentValues.sportIds
              }>
                {() => (
                  <Form.Item
                    label="Mặt sân"
                    name="surface"
                    rules={[{ required: true, message: 'Vui lòng chọn mặt sân' }]}
                  >
                    <Select placeholder="Chọn mặt sân">
                      {getSurfaceOptions().map((surface, index) => (
                        <Option key={index} value={surface}>
                          {surface}
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                )}
              </Form.Item>
            </Col>
            
            <Col span={12}>
              <Form.Item noStyle shouldUpdate={(prevValues, currentValues) => 
                prevValues.sportIds !== currentValues.sportIds
              }>
                {() => (
                  <Form.Item
                    label="Kích thước"
                    name="dimension"
                    rules={[{ required: true, message: 'Vui lòng chọn kích thước sân' }]}
                  >
                    <Select placeholder="Chọn kích thước sân">
                      {getDimensionOptions().map((dimension, index) => (
                        <Option key={index} value={dimension}>
                          {dimension}
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                )}
              </Form.Item>
            </Col>
          </Row>
          
          <Divider />
          
          {/* Peak Hours */}
          <Title level={5}>Giờ cao điểm</Title>
          
          <Row className="mb-2">
            <Col span={24}>
              <div className="flex items-center">
                <Text>Số khung giờ cao điểm: {visiblePeaks}</Text>
              </div>
            </Col>
          </Row>
          
          {/* Peak Time 1 - only visible if visiblePeaks >= 1 */}
          {visiblePeaks >= 1 && (
            <Row gutter={16} className="mb-4">
              <Col span={23}>
                <Form.Item
                  label={<span className="font-medium">Khung giờ cao điểm 1</span>}
                  required={false}
                  className="mb-1"
                >
                  <div className="flex items-center">
                    <Form.Item
                      name="peakTime1"
                      className="mb-0 flex-grow"
                      rules={[
                        { 
                          validator: async (_, value) => {
                            if (!value || !value[0] || !value[1]) {
                              return Promise.resolve();
                            }
                            const startTime = value[0];
                            const endTime = value[1];
                            if (startTime.isAfter(endTime)) {
                              return Promise.reject('Giờ kết thúc phải sau giờ bắt đầu');
                            }
                            return Promise.resolve();
                          }
                        }
                      ]}
                      getValueProps={() => {
                        return { value: getPeakTimeRange(1) };
                      }}
                    >
                      <TimePicker.RangePicker
                        format="HH:mm"
                        className="w-full"
                        placeholder={['Giờ bắt đầu', 'Giờ kết thúc']}
                        minuteStep={30}
                        onChange={(times) => handlePeakTimeRangeChange(1, times as [dayjs.Dayjs | null, dayjs.Dayjs | null])}
                      />
                    </Form.Item>
                    
                    {/* Hidden fields to store values for API compatibility */}
                    <Form.Item name="peakStartTime1" hidden>
                      <Input />
                    </Form.Item>
                    <Form.Item name="peakEndTime1" hidden>
                      <Input />
                    </Form.Item>
                  </div>
                </Form.Item>
                
                <Form.Item 
                  name="priceIncrease1"
                  label="Tăng giá"
                  className="mb-1"
                >
                  <InputNumber
                    style={{ width: '100%' }}
                    addonAfter="VNĐ/giờ"
                    min={0}
                    max={999999999}
                    step={10000}
                    formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, '.')}
                    parser={(value: string | undefined) => {
                      if (!value) return 0;
                      return Number(value.replace(/\./g, ''));
                    }}
                  />
                </Form.Item>
              </Col>
              <Col span={1} className="flex items-center mt-8">
                <Button 
                  type="text" 
                  danger 
                  icon={<MinusCircleOutlined />} 
                  onClick={() => removePeakTime(1)}
                />
              </Col>
            </Row>
          )}
          
          {/* Peak Time 2 - shown when visiblePeaks >= 2 */}
          {visiblePeaks >= 2 && (
            <Row gutter={16} className="mb-4">
              <Col span={23}>
                <Form.Item
                  label={<span className="font-medium">Khung giờ cao điểm 2</span>}
                  required={false}
                  className="mb-1"
                >
                  <div className="flex items-center">
                    <Form.Item
                      name="peakTime2"
                      className="mb-0 flex-grow"
                      rules={[
                        { 
                          validator: async (_, value) => {
                            if (!value || !value[0] || !value[1]) {
                              return Promise.resolve();
                            }
                            const peakTime1 = form.getFieldValue('peakTime1');
                            const startTime = value[0];
                            const endTime = value[1];
                            
                            if (peakTime1 && peakTime1[1] && startTime.isBefore(peakTime1[1])) {
                              return Promise.reject('Giờ bắt đầu phải sau giờ kết thúc của giờ cao điểm 1');
                            }
                            if (startTime.isAfter(endTime)) {
                              return Promise.reject('Giờ kết thúc phải sau giờ bắt đầu');
                            }
                            return Promise.resolve();
                          }
                        }
                      ]}
                      getValueProps={() => {
                        return { value: getPeakTimeRange(2) };
                      }}
                    >
                      <TimePicker.RangePicker
                        format="HH:mm"
                        className="w-full"
                        placeholder={['Giờ bắt đầu', 'Giờ kết thúc']}
                        minuteStep={30}
                        onChange={(times) => handlePeakTimeRangeChange(2, times as [dayjs.Dayjs | null, dayjs.Dayjs | null])}
                      />
                    </Form.Item>
                    
                    {/* Hidden fields to store values for API compatibility */}
                    <Form.Item name="peakStartTime2" hidden>
                      <Input />
                    </Form.Item>
                    <Form.Item name="peakEndTime2" hidden>
                      <Input />
                    </Form.Item>
                  </div>
                </Form.Item>
                
                <Form.Item 
                  name="priceIncrease2"
                  label="Tăng giá"
                  className="mb-1"
                >
                  <InputNumber
                    style={{ width: '100%' }}
                    addonAfter="VNĐ/giờ"
                    min={0}
                    max={999999999}
                    step={10000}
                    formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, '.')}
                    parser={(value: string | undefined) => {
                      if (!value) return 0;
                      return Number(value.replace(/\./g, ''));
                    }}
                  />
                </Form.Item>
              </Col>
              <Col span={1} className="flex items-center mt-8">
                <Button 
                  type="text" 
                  danger 
                  icon={<MinusCircleOutlined />} 
                  onClick={() => removePeakTime(2)}
                />
              </Col>
            </Row>
          )}
          
          {/* Peak Time 3 - shown when visiblePeaks >= 3 */}
          {visiblePeaks >= 3 && (
            <Row gutter={16} className="mb-4">
              <Col span={23}>
                <Form.Item
                  label={<span className="font-medium">Khung giờ cao điểm 3</span>}
                  required={false}
                  className="mb-1"
                >
                  <div className="flex items-center">
                    <Form.Item
                      name="peakTime3"
                      className="mb-0 flex-grow"
                      rules={[
                        { 
                          validator: async (_, value) => {
                            if (!value || !value[0] || !value[1]) {
                              return Promise.resolve();
                            }
                            const peakTime2 = form.getFieldValue('peakTime2');
                            const startTime = value[0];
                            const endTime = value[1];
                            
                            if (peakTime2 && peakTime2[1] && startTime.isBefore(peakTime2[1])) {
                              return Promise.reject('Giờ bắt đầu phải sau giờ kết thúc của giờ cao điểm 2');
                            }
                            if (startTime.isAfter(endTime)) {
                              return Promise.reject('Giờ kết thúc phải sau giờ bắt đầu');
                            }
                            return Promise.resolve();
                          }
                        }
                      ]}
                      getValueProps={() => {
                        return { value: getPeakTimeRange(3) };
                      }}
                    >
                      <TimePicker.RangePicker
                        format="HH:mm"
                        className="w-full"
                        placeholder={['Giờ bắt đầu', 'Giờ kết thúc']}
                        minuteStep={30}
                        onChange={(times) => handlePeakTimeRangeChange(3, times as [dayjs.Dayjs | null, dayjs.Dayjs | null])}
                      />
                    </Form.Item>
                    
                    {/* Hidden fields to store values for API compatibility */}
                    <Form.Item name="peakStartTime3" hidden>
                      <Input />
                    </Form.Item>
                    <Form.Item name="peakEndTime3" hidden>
                      <Input />
                    </Form.Item>
                  </div>
                </Form.Item>
                
                <Form.Item 
                  name="priceIncrease3"
                  label="Tăng giá"
                  className="mb-1"
                >
                  <InputNumber
                    style={{ width: '100%' }}
                    addonAfter="VNĐ/giờ"
                    min={0}
                    max={999999999}
                    step={10000}
                    formatter={(value) => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, '.')}
                    parser={(value: string | undefined) => {
                      if (!value) return 0;
                      return Number(value.replace(/\./g, ''));
                    }}
                  />
                </Form.Item>
              </Col>
              <Col span={1} className="flex items-center mt-8">
                <Button 
                  type="text" 
                  danger 
                  icon={<MinusCircleOutlined />} 
                  onClick={() => removePeakTime(3)}
                />
              </Col>
            </Row>
          )}
          
          {/* Button to add peak time - shown when visiblePeaks < 3 */}
          <Row className="mb-4">
            <Col span={24}>
              <Button 
                type="dashed" 
                onClick={addPeakTime} 
                icon={<PlusOutlined />}
                className="w-full"
              >
                Thêm khung giờ cao điểm
              </Button>
            </Col>
          </Row>
          
          {/* Hide the original numberOfPeaks select */}
          <Form.Item name="numberOfPeaks" hidden>
            <Input />
          </Form.Item>
          
          <Divider />
          
          {/* Fields */}
          <Title level={5}>Thông tin sân</Title>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item 
                label="Số lượng sân" 
                name="fieldCount"
                rules={[{ required: true, message: 'Vui lòng nhập số lượng sân' }]}
              >
                <InputNumber 
                  min={1} 
                  max={20} 
                  style={{ width: '100%' }} 
                  onChange={handleFieldCountChange}
                />
              </Form.Item>
            </Col>
            
            <Col span={12}>
              <Form.Item noStyle shouldUpdate={(prevValues, currentValues) => 
                prevValues.useCustomName !== currentValues.useCustomName || 
                prevValues.fieldCount !== currentValues.fieldCount
              }>
                {({ getFieldValue }) => {
                  const useCustomName = getFieldValue('useCustomName');
                  const fieldCount = getFieldValue('fieldCount') || 1;
                  
                  // Auto-update group name if not custom
                  if (!useCustomName && form.getFieldValue('name')) {
                    const sportName = sport.id === 999 
                      ? 'Đa năng' 
                      : getSportNameInVietnamese(sport.name);
                    
                    setTimeout(() => {
                      form.setFieldsValue({
                        name: `Nhóm ${fieldCount} sân ${sportName}`
                      });
                    }, 0);
                  }
                  
                  return (
                    <Form.Item label="Phương thức đặt tên">
                      <Select
                        value={namingMethod}
                        onChange={handleNamingMethodChange}
                        style={{ width: '100%' }}
                      >
                        <Option value="auto">Tự động</Option>
                        <Option value="custom">Tùy chỉnh</Option>
                      </Select>
                    </Form.Item>
                  );
                }}
              </Form.Item>
            </Col>
          </Row>
          
          {/* Auto naming và Custom naming */}
          <Form.Item noStyle shouldUpdate={(prevValues, currentValues) =>
            prevValues.fieldCount !== currentValues.fieldCount
          }>
            {({ getFieldValue }) => {
              // Get field count from form instead of using the state directly
              const currentFieldCount = getFieldValue('fieldCount') || 1;
              
              return (
                <>
                  {/* Auto naming */}
                  {namingMethod === 'auto' && (
                    <Form.Item label="Tiền tố tên sân">
                      <Input 
                        value={fieldPrefix}
                        onChange={(e) => setFieldPrefix(e.target.value)}
                        placeholder="Nhập tiền tố cho tên sân (VD: Sân, Field)"
                      />
                      <Text type="secondary">
                        Tên sân sẽ được đặt tự động theo mẫu: {fieldPrefix} 1, {fieldPrefix} 2, ...
                      </Text>
                    </Form.Item>
                  )}
                  
                  {/* Custom naming */}
                  {namingMethod === 'custom' && (
                    <Form.Item label="Tên tùy chỉnh cho từng sân">
                      <div className="grid grid-cols-2 gap-2">
                        {Array.from({ length: currentFieldCount }).map((_, index) => (
                          <Input 
                            key={index}
                            value={customNames[index] || ''}
                            onChange={(e) => handleCustomNameChange(index, e.target.value)}
                            placeholder={`Tên sân ${index + 1}`}
                            className="mb-2"
                          />
                        ))}
                      </div>
                    </Form.Item>
                  )}
                </>
              );
            }}
          </Form.Item>
          
          {/* Preview */}
          <Card 
            title="Xem trước tên sân" 
            size="small" 
            className="mb-4"
            styles={{ body: { maxHeight: '150px', overflowY: 'auto' } }}
          >
            <div className="flex flex-wrap gap-2">
              {generateFieldNames().map((name, i) => (
                <Tag key={i} color="blue">{name}</Tag>
              ))}
            </div>
          </Card>
        </Form>
      </Form.Provider>
    </Modal>
  );
};

export default FieldGroupForm; 